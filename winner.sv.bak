module winner (clk, reset, L9, L1, L, R, number);
	input logic clk, reset, L9, L1, L, R;
	output logic [6:0] number;
	
	enum logic[6:0] { OFF=7'b1111111, ONE=7'b1111001 , TWO=7'b0100100 } ps, ns;
	
	always_comb begin
		case (ps)
 			OFF: if (L9 & L)			ns = ONE;
				  else if (L1 & L) 	ns = TWO;
				  else					ns = OFF;
			ONE: 							ns = ONE;
			TWO: 							ns = TWO;
		endcase
	end

	assign number = ps;
	
	always_ff @(posedge clk) begin
		if (reset)
			ps <= OFF;
		else
			ps <= ns;
	end
endmodule 

module winner_testbench();
	logic clk, reset, L, R, NL, NR;
	logic light;
	
	normalLight dut (.clk, .reset, .L, .R, .NL, .NR, .light);
	
	parameter CLOCK_PERIOD=100;
	initial begin
		clk <= 0;
		forever #(CLOCK_PERIOD/2) clk <= ~clk;
	end
	
	initial begin
																				@(posedge clk);
		reset <= 1;															@(posedge clk);
																				@(posedge clk);
		reset <= 0; L <= 0; R <= 0; NL <= 0; NR <= 0;		   @(posedge clk);
																				@(posedge clk);
								  R <= 1; NL <= 1; 						@(posedge clk);
								  R <= 0;									@(posedge clk);
																				@(posedge clk);
						L <= 1; 												@(posedge clk); 
																				@(posedge clk);
														NR <= 1; 			@(posedge clk);
									R <= 1;									@(posedge clk);
									R <= 0;									@(posedge clk);
																				@(posedge clk);
		$stop;
	end
endmodule 